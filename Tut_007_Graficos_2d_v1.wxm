/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 17.10.1 ] */
/* [wxMaxima: title   start ]
Volume I_- Tutorial 07
Introdução aos Gráficos 2D no Maxima
   [wxMaxima: title   end   ] */


/* [wxMaxima: subsect start ]
Tutoriais do Maxima, Série Sistema de Álgebra Computacional Maxima,
versão 1, 2018
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Prólogo

* Neste tutorial iremos aprender a utilizar os comando para gerar gráficos 2D do Maxima
* Este é um tutorial elaborado para iniciantes na utilização do Maxima e wxMaxima.
* Um exemplo dos possíveis resultados gráficos é exibido abaixo como amostra: Figura 01
* Forme o hábito de sempre consultar as ajudas dos (wx)Maxima para a utilização dos comandos e de suas opções.
   [wxMaxima: comment end   ] */


/* [wxMaxima: caption start ]
Gráfico em coordenadas polares da Rosa Polar
   [wxMaxima: caption end   ] */
/* [wxMaxima: image   start ]
jpg

   [wxMaxima: image   end   ] */


/* [wxMaxima: comment start ]
* O Maxima possui diversos recursos e opções para criar e apresentar gráficos iremos conhecer esses recursos e opções de forma gradual e interativa neste tutorial.
* No Maxima dois pacotes(gerais) realizam a função de gerar gráficos, e ambos disponibilizam uma biblioteca de recursos completa.
* Neste tutorial abordaremos apenas um desses pacotes, contudo o pacote 'plot' é uma tão boa escolha quanto o 'draw' aqui utilizado.
* Neste texto a escolha se deu por familiaridade com o pacote 'draw', mas incentivo o leitor a explorar também o pacote 'plot'.
* O usuário tem disponíveis os dois pacotes para utilizar a sua escolha, com bons resultados em ambos.
* elementos chave: draw, 
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Informações
* referências:
[1] Königsmann, G.; Wilson, M.; Zandt J. V. The wxMaxima user’s manual, 2017 obtido em https://github.com/andrejv/wxmaxima/blob/master/info/wxmaxima.html
[2] Maxima 5.41.0 Manual, 2017 obtido em http://maxima.sourceforge.net/docs/manual/maxima.html
* citação:
Sirgado, L. A. Maxima Tutorials, Maxima Computational Algebra System Series, v. 1, 2018.
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Apresentando o comando (wx)draw2d do (wx)Maxima
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
a principal diferença entre o 'draw2d' e o 'wxdraw2d' é a forma de exibição, o primeiro utliza a forma padrão,
sendo apresentado em uma janela individual (o console do GNUplot) e o segundo é integrado na área de
trabalho do xwMaxima, sendo apresentado como parte desta. Para utilizar um ou outro basta incluir ou
apagar o prefixo 'wx' .
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Gerando um gráfico simples de uma única curva
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* o comando 'xwdraw2d' recebe a variável 'explicit' que calcula a expressão '1/(1+exp(-0.7*(x-0.5))' para 'x' no intervalo de -8 a 8.
* a variável 'explicit' é utilizada para gerar um gráfico utilizando como entrada uma expressão explícita da variável indicada.
* a curva traçada é uma forma da curva logística.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(explicit(1/(1+exp(-0.7*(x-0.5))),x,-6,6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Gerando o gráfico de uma única curva com mais opções de formatação
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* são incluidas as opções de grade, cor da linha, espessura da linha, traço da linha, cor do fundo, e outras.
    * também ponto indicativo usando o asterisco, e rótulos, ver o  exemplo abaixo:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    /*opções gerais - bloco de configuração*/
    title="Aspecto de uma curva logística",
    ytics=(0.1),
    xtics=(0.25),
    background_color=light-gray,
    dimensions=[720,480],
    proportional_axes='xy, /*use:|none,|ou|'xy,|;gráfico com os eixos proporcionais*/
    yrange=[-0.1,1.3],
    xrange=[-2.25,2.25],
    font="Verdana", /*o valor padrão para a fonte é string vazio: ' font="" '*/
    font_size=8,    /*para configurar o tamanho da fonte é_                   */
                    /*necessário atribuir uma fonte válida à variável 'font' */
    
    /*curva logística - bloco de configuração*/
    grid=true,
    color=dark-green,
    line_width=0.5,
    explicit(+1/(1+exp(-10.1*(x))),x,-2,2),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[0,0.5]]),
    color=dark-green,
    point_size=1,
    point_type=circle,
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["curva logística",1.125,1.1],
         ["ponto de inflexão",0.5,0.5]
    )
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* o aspecto vazio do gráfico é proposital, mostra a exibição com os eixos na mesma escala.
* a variável ' proportional_axes='xy ' pode ser modificada para ' proportional_axes=none ' para retornar ao padrão.
* um gráfico com os eixos proporcionais é importante para visualizações com a mesma grandeza e unidade nos dois eixos ou
 ainda com gráficos de coordenadas polares, isso evita distorções na representação gráfica.
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Gerando um gráfico de multiplas curvas com mais opções de formatação
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* abaixo o comando 'xwdraw2d' recebe quatro equações que são resolvidas pelas respectivas variáveis.
* a variável 'explicit' é utilizada para gerar uma curva utilizando como entrada uma expressão explícita da variável indicada.
* as variáveis 'implicit' e 'parametric' respectivamente calculam expressões nas formas implícita e paramétrica, igualmente.
* curvas geradas pelas expressões:
        * 1     na variável 'explicit' calcula-se a expressão '1/(1+exp(-0.7*(x-0.5))' para 'x' no intervalo de -8 a 8.
        * 1.1 na variável 'explicit' calcula-se a expressão '(12-x^4)^(1/4)' para 'x' no intervalo de -8 a 8.
        * 2    na variável 'implicit' calcula-se a expressão '(x^4+y^4=12)' para 'x' e 'y' no intervalo de -8 a 8.
        * 3     na variável 'parametric' calculam-se as expressões 'x' ; '1/2+(atan(x)^3)/2' para 'x' no intervalo de -8 a 8.
* são incluidas as opções de grade, cor da linha, espessura da linha, traço da linha, cor do fundo, e outras.
    * também pontos indicativos usando o asterisco, e rótulos, ver o  exemplo abaixo:
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
* atenção com a utilização das variáveis 'explicit'; 'implicit'; 'parametric' todas requerem diferentes formas de entrada,
  tanto da(s) expressão(ões), como da(s) variável(eis) para serem corretamente avaliadas.
* a variável 'ip_grid' foi ajustada para melhorar a resolução da curva de "implicit", 'ip_grid_in' não foi alterada.
* as variáveis 'ip_grid' e 'ip_grid_in' somente tem utilização pela variável 'implicit'.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    /*opções gerais - bloco de configuração*/
    title="Pot-pourri de curvas",
    ytics=(0.5),
    xtics=(0.5),
    grid=true,
    background_color=light-gray,
    dimensions=[720,720],
    proportional_axes='xy,
    font="Verdana", /*o valor padrão para a fonte é string vazio: 'font=""'*/
    font_size=8,    /*para configurar o tamanho da fonte é */
                    /*necessário atribuir uma fonte à variável 'font'*/
    
    /*1 - curva logística - bloco de configuração*/
    color=dark-green,
    line_width=0.5,
/*1*/explicit(+1/(1+exp(-10.1*(x))),x,-2,2),
    
    /*1.1 - curva de Lamé modificada - bloco de configuração*/
    color=orange,
    line_width=2,
/*1.1*/explicit(((12-x^4)^(1/4)),x,-2,2), 
    
    /*2 - curva de Lamé - bloco de configuração*/
    color=dark-blue,
    line_width=2,
    line_type=dots,
    ip_grid=[150,300],   /*ajusta a resolução de traçagem para 'implicit', padrão 50,50*/
    ip_grid_in=[5,5],   /*ajusta a resolução de traçagem para 'implicit', padrão 5,5*/
/*2*/implicit((x^4+y^4=12),x,-2,2,y,-2,2),
    
    /*3 - curva arctan-cúbica - bloco de configuração*/
    color=blue,
    line_type=dots,
    line_width=2,
/*3*/parametric(x,1/2+(atan(x)^3)/2,x,-2,2),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([ [1.8,1.1], [1.87,0.13], [0,0.5],
            [-1.87,0.13], [-1.87,-0.13] ]),
    color=dark-green,
    point_size=1,
    point_type=circle,
    points([[0.65,1.17]]),
    color=orange,
    point_size=1,
    point_type=circle,
    points([[-1.15,1.7]]),
    color=blue,
    point_size=1,
    point_type=circle,
    points([[0.6,0.4]]),
    color=dark-blue,
    point_size=1,
    point_type=circle,
    points([[-1.18,1.7]]),
    color=dark-blue,
    point_size=1,
    point_type=circle,
    points([[0.05,-1.7]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["logística",1,1.17], ["arctan-cúbica",1.15,0.4],
         ["Lamé e Lamé modificada",-0.2,1.7], ["Lamé",0.3,-1.7]
    )    
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Gerando um gráfico com preenchimento de área
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    /*opções gerais - bloco de configuração*/
    title="Preenchimento de área sob a curva",
    ytics=(0.5),
    xtics=(0.5),
    grid=true,
    background_color=light-gray,
    dimensions=[720,720],
    proportional_axes='xy,
    font="Verdana", /*o valor padrão para a fonte é string vazio: 'font=""'*/
    font_size=8,    /*para configurar o tamanho da fonte é */
                    /*necessário atribuir uma fonte à variável 'font'*/
    fill_color=yellow,
    
    /*1 - curva logística - bloco de configuração*/
    color=blue,
    line_type=dots,
    filled_func=true,
/*1*/explicit((+1/(1+exp(-10.1*(x)))),x,-2,2),
    
    /*2 - curva arctan-cúbica - bloco de configuração*/
    color=blue,
    line_type=dots,
    line_width=2,
    filled_func=false,
/*2*/parametric(x,1/2+(atan(x)^3)/2,x,-2,2),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=green,
    point_size=1.5,
    point_type=asterisk,
    points([ [1.55,1.0], [1.55,0.00], [0,0.5],
            [-1.55,0.00], [-1.55,1.0] ]),
    color=dark-green,
    point_size=1,
    point_type=circle,
    points([[0.65,1.00]]),
    color=blue,
    point_size=1,
    point_type=circle,
    points([[0.6,0.575]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["logística",1,1.00], ["arctan-cúbica",1.15,0.575]
    )    
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Gerando um gráfico em coordenadas polares com formatação
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* a variável 'polar' é utilizada para gerar uma curva utilizando como entrada uma expressão  da variável indicada.
* a variável 'ntics' é ajustada para melhorar a resolução de traçagem da curva por 'polar'.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ateta:1$ bteta:1/(2*%pi)$ Θteta_0:0*2*%pi$
wxdraw2d(
    /*opções gerais - bloco de configuração*/
     title="Espiral de Arquimedes",
    ytics=(2),
    xtics=(5),
    grid=true,
    background_color=light-gray,
    dimensions=[480,480],
    proportional_axes='xy,
    yrange=[-28,28],
    xrange=[-28,28],
    font="Verdana", /*o valor padrão para a fonte é string vazio: ' font="" '*/
    font_size=8,    /*para configurar o tamanho da fonte é_                  */
                    /*necessário atribuir uma fonte válida à variável 'font' */
    
    /*espiral de Arquimedes - bloco de configuração*/
    color=dark-green,
    line_width=0.5,
    nticks=(3000),  /*ajusta a resolução de traçagem da curva*/
    polar(ateta+bteta*(Θ+Θteta_0),Θ,0,50*%pi),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[1,0]]),
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[26,0]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["Espiral de Arquimedes",13,26],
         ["ponto inicial | ponto final",13.55,0.25]
    )
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Gerando outro gráfico em coordenadas polares com mais formatação
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* a variável 'polar' é utilizada para gerar uma curva utilizando como entrada uma expressão da variável indicada.
* a função 'concat' é utilizada para gerar uma 'string' com informações calculadas utilizadas como rótulo.
* altere os valores de 'nteta2' e 'dteta2' para observar o resultado da concatenação na porção inferior do gráfico.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/*Atribuição das variáveis utilizadas na curva*/

ateta2:25$              /*comprimento da pétala da rosa*/
nteta2:7$               /*numerador de 'b', valor padrão 7*/
dteta2:2$               /*denominador de 'b' valor padrão 2*/
bteta2:(nteta2/dteta2)$ /*'b' modificador da rosa*/
Θteta2_0:(3/4)*2*%pi$       /*angulo de traçado da rosa*/

wxdraw2d(
    /*opções gerais - bloco de configuração*/
     title="Rosa polar",
    ytics=(2),
    xtics=(5),
    grid=true,
    background_color=light-gray,
    dimensions=[480,480],
    proportional_axes='xy,
    yrange=[-30,28],
    xrange=[-28,28],
    font="Verdana", /*o valor padrão para a fonte é string vazio: ' font="" '*/
    font_size=8,    /*para configurar o tamanho da fonte é_                   */
                    /*necessário atribuir uma fonte válida à variável 'font' */
    
    /*Rosa Polar - bloco de configuração*/
    color=dark-green,
    line_width=0.5,
    nticks=(3000), /*ajusta a resolução de traçagem da curva*/
    polar(ateta2*cos(bteta2*Θ+Θteta2_0),Θ,0,100*%pi),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[-25,-27]]),
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[25,-27]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["Rosa Polar [ r(Θ)=a*cos(b*Θ+Θ_0) ]",0,26],
         [concat("b=n/d para n=",string(nteta2),"; d=",string(dteta2),"; b=",string(bteta2)),0,-27]
    )
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Gerando gráficos com listas utilizando a opção points
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
Neste exemplo é calculado o valor aproximado de PI pelo método de Monte Carlo.
* as listas obtidas são utilizadas para gerar o gráfico da observações e das margens de erros.
* são ainda geradas três listas, duas de margem de erro e uma de referência, no corpo do comando ' draw '.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
São calculadas duas margens de erro do valor aproximado de PI.
* considerando que a margem de erro absoluto é medida por:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
moe_a: 1/sqrt(n);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* onde ' n ' é o número de observações.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ou ainda considerando que margem de erro pode ser medida medida por:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
N:n;
P:p/N;
moe: 2*sqrt(P*(1-P)/N);
%, numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* onde ' n ' é o número de observações.
* ' p ' é o número de pontos no círculo.
* ' P ' é a fração dos pontos no círculo pelo total de observações
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Os resultados do π aproximado são calculados e armazenados em uma lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
counter_n: 10000$
vals_list:[1]$
moe_list:[1]$
rerr_list:[1]$
for n thru counter_n do ( /*laço de acumulado*/
    if (sqrt((random(1.0))^2+(random(1.0))^2))<=1 then tail:1 else tail:0,
    tail:tail+last(vals_list),
    moe:2*sqrt((tail/n)*(1-(tail/n))/n), /*2*sqrt(P*(1-P)/N)*/
    moe_list:endcons(moe,moe_list), /*preenche a lista de margem de erro*/
    vals_list:endcons(tail,vals_list), /*preenche a lista de acumulado*/
    eps:((4*(tail/n)-π)/π),
    rerr_list:endcons(eps,rerr_list),   /*preenche a lista de erro relativo*/
    float(appPI:4*(tail/n)),
    float(rerrPI:((4*(tail/n)-π)/π))
);
appPI, numer;rerrPI, numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    title="Relative error of PI: (AppPI-PI)/PI",
    ytics=(0.02),
    xtics=(2000),
    background_color=light-gray,
    dimensions=[720,480],
    xrange=[1,counter_n],
    yrange=[-1/10,1/10],
    color=navy,
    point_type=circle,
    point_size=0.15,
    points(rerr_list), /*utiliza os pontos da 'rerr_list' como entrada*/
    points_joined=true,   
    color=red,
    line_width=0.5,
    line_type=solid,
    point_type=none,
    points(makelist(1/sqrt(n),n,counter_n)), /*cria uma lista com '1/sqrt(n)'*/
    points(makelist(-1/sqrt(n),n,counter_n)), /*cria uma lista com '-(1/sqrt(n))'*/   
    color=green,
    line_width=1,
    line_type=solid,
    points(makelist(0,counter_n)),        /*cria uma lista preenchida com zeros*/
    color=yellow,
    line_width=0.75,
    line_type=solid,    
    points(realpart(moe_list)), /*utiliza os pontos da 'moe_list' como entrada*/
    points(-realpart(moe_list)) /*utiliza os pontos da 'moe_list' como entrada*/
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Formatação utilizando 'set_draw_defaults' para padronização de gráficos
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* a formatação da função ' draw2d ' pode ser padronizada para todos os gráficos utilizando 'set_draw_defaults'.
* permite ajustar a formatação de todos os gráficos a partir de sua chamada.
* ajustes locais de um gráfico sobrepõem os ajustes globais personalizados.
* ao terminar o grupo de gráficos clones pode-se retornar às configurações padrão chamando a função 'set_draw_defaults' sem parâmetros.
* a formatação abaixo será utilizada para todos os três gráficos de uma série de "Composição/decomposição de curvas.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
* ao final a função 'set_draw_defaults' é chamada sem parâmetros para retornar a função 'draw' para os valores padrão.
exatamente como na linha imediatamente abaixo:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
set_draw_defaults()$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* a célula abaixo configura os parâmetros globais de draw de acordo com a personalização desejada. 
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
set_draw_defaults(
    /*opções globais - bloco de configuração*/
    title="Composição/decomposição de curvas",
    xaxis=true,
    xaxis_color=dark-gray,
    xaxis_type=solid,
    xaxis_width=1,
    xtics=0.5,
    yaxis=true,
    yaxis_color=dark-gray,
    yaxis_type=solid,
    yaxis_width=1,
    ytics=0.05,
    line_width=0.5,
    color=auto,
    grid=true,
    background_color=light-gray,
    dimensions=[1024,768],
    proportional_axes=none,
    yrange=[-0.8,0.8],      /*definição global sobreposta no primeiro gráfico*/
    xrange=[0,6.25],
    font="Verdana", /*o valor padrão para a fonte é string vazio: ' font="" '*/
    font_size=8    /*para configurar o tamanho da fonte é_                   */
                    /*necessário atribuir uma fonte válida à variável 'font' */
    
)$ /*fim do bloco de configuração*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    yrange=[0,0.8], /*definição local sobrepõe a definição global personalizada*/
    
    color=cyan,
    explicit(atan(sqrt(sin(x^3)^2)),x,0,6.43),    /*curva parcial seno*/
    color=black,
    explicit(atan(sqrt(sin(x^3)^2-cos(x)^2)),x,0,6.43), /*curva composta*/
    color=magenta,
    explicit(atan(sqrt(cos(-1.57+x)^2)),x,0,6.43), /*curva parcial coseno, deslocada em x*/
    color=blue,
    explicit(atan(sqrt(cos(x)^2)),x,0,6.43), /*curva parcial coseno, não deslocada*/
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[0.2,0.07], [2.5,0.07]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["Conjunto de curvas 1",1.3,0.07])
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(
    color=black,
    explicit(atan(sin(x^3)^2-cos(x)^2),x,0,6.3),
    color=blue,
    explicit(atan(-cos(x)^2),x,0,6.3),
    color=cyan,
    explicit(atan(sin(x^3)^2),x,0,6.3),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[0.2,-0.7], [2.5,-0.7]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["Conjunto de curvas 2",1.3,-0.7])
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxdraw2d(    
    color=black,
    explicit((atan(-sin(x^3)^2+cos(x)^2)),x,0,6),   
    color=blue,
    explicit((atan(cos(x)^2)),x,0,6),   
    color=cyan,
    explicit((atan(-sin(x^3)^2)),x,0,6),
    
    /*marcadores com asterisco - bloco de configuração*/
    color=yellow,
    point_size=1.5,
    point_type=asterisk,
    points([[0.2,-0.7], [2.5,-0.7]]),
    
    /*rótulos identificadores - bloco de configuração*/
    color=black,
    label(["Conjunto de curvas 3",1.3,-0.7])
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
set_draw_defaults()$ /*retorna a função draw para os valores padrão dos parâmetros*/
/* [wxMaxima: input   end   ] */



/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
