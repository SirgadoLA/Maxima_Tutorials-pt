/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 17.10.1 ] */
/* [wxMaxima: title   start ]
Volume I_- Tutorial 06
Manipulando sequências e séries
   [wxMaxima: title   end   ] */


/* [wxMaxima: subsect start ]
Tutoriais do Maxima, Série Sistema de Álgebra Computacional Maxima,
versão 1, 2018
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Prólogo

* Neste tutorial iremos criar e manipular sequências e séries no Maxima.
* Este é um tutorial elaborado para iniciantes na utilização do Maxima e wxMaxima.
* Um exemplo dos possíveis resultados gráficos é exibido abaixo como amostra: Figura 01
* Forme o hábito de sempre consultar as ajudas dos (wx)Maxima para a utilização dos comandos e de suas opções.
   [wxMaxima: comment end   ] */


/* [wxMaxima: caption start ]
Amostra do gráfico obtido na seção 2.0 - série de Madhava–Leibniz
   [wxMaxima: caption end   ] */
/* [wxMaxima: image   start ]
jpg

   [wxMaxima: image   end   ] */


/* [wxMaxima: comment start ]
* sequências e séries podem ser geradas e manipuladas no Maxima de diferentes formas.
* os operadores de atribuição e as funções do Maxima tratam e processam(ou não) de forma diferente cada uma das formas.
* elementos chave: listas, função ' sum ', função 'limit ',  função 'tlimit '.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Informações
* referências:
[1] Königsmann, G.; Wilson, M.; Zandt J. V. The wxMaxima user’s manual, 2017 obtido em https://github.com/andrejv/wxmaxima/blob/master/info/wxmaxima.html
[2] Maxima 5.41.0 Manual, 2017 obtido em http://maxima.sourceforge.net/docs/manual/maxima.html
* citação:
Sirgado, L. A. Maxima Tutorials, Maxima Computational Algebra System Series, v. 1, 2018.
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Criando e atribuindo sequências e séries
   [wxMaxima: section end   ] */


/* [wxMaxima: subsect start ]
Criando e atribuindo sequências
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* sequências(sucessões) e séries.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Inicialmente iremos definir, não formalmente, o que sejam sequência e série.
* sequência é uma função cujo domínio é o conjunto dos números naturais e seu contradomínio é um conjunto de termos.
* uma série é a soma dos termos de uma sequência (neste texto não faremos distinção incluindo qualquer representação).
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsubsect start ]
Sequências(Listas) e sua manipulação no Maxima
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
* uma sequência no Maxima pode ser armazenada como dado em uma variável do tipo 'list', esta pode armazenar diversos tipos de dados.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
eu_sou_uma_lista:[1/1,-1/3,+1/7,-1/11,+1/13]$ /*o terminador '$' omite o resultado*/
eu_sou_uma_sequencia:eu_sou_uma_lista$
eu_sou_uma_sequencia; /*a lista é uma forma de armazenar dados no Maxima que*/
                      /*é adequada para armazenar e manipular uma sequência*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* podemos acessar o conteúdo da lista utilizando a forma abaixo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a:4$
eu_sou_uma_sequencia[1];
eu_sou_uma_sequencia[a];
eu_sou_uma_sequencia[2];
eu_sou_uma_sequencia[3];
eu_sou_uma_sequencia[4];
eu_sou_uma_sequencia[5];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* podemos alterar o conteúdo da lista, por exemplo, utilizando a forma abaixo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a:4$
eu_sou_uma_sequencia[1]:3$
eu_sou_uma_sequencia[2]:3^2$
eu_sou_uma_sequencia[3]:3*3*3$
eu_sou_uma_sequencia[a]:3^a$
eu_sou_uma_sequencia[5]:3^5$
eu_sou_uma_sequencia;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kill(a); /*remove a variável 'a'*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kill(eu_sou_uma_sequencia); /*remove a variável 'eu_sou_uma_sequencia'*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
eu_sou_uma_sequencia;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
a função 'cons'
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
a função 'cons' permite inserir um elemento na primeira posição de uma lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
[];        /*cria uma lista sem elementos*/
cons(2,%); /*a variável '%' armazena a última saída calculada do Maxima*/
cons(1,%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
cons(2,[3,4,5,6,7]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
list_1to7:cons(1,%); /*a variável '%' armazena a última saída calculada do Maxima*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
a função 'endcons'
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
a função 'endcons' permite inserir um elemento na última posição de uma lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
endcons(7,[1,2,3,4,5,6]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
list_1to8:endcons(8,%); /*a variável '%' armazena a última saída calculada do Maxima*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
a função 'makelist'
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
a função 'makelist' permite criar uma lista a partir do termo geral de sequência.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
makelist(k,k,12);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
makelist(k^-1,k,12);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
makelist((k-1)^2-12*(k-1)+4,k,13);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
makelist('((k-1)^2-12*(k-1)+4)/((k+1)^2*'k),k,4); /*o operador ' previne a avaliação parcial da expressão*/
         /*a parte do divisor '(k+1)^2' é avaliado pois se encontra fora dos parêntesis dos operadores ' */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
makelist('(((k-1)^2-12*(k-1)+4)/((k+1)^2*k)),k,4); /*o operador ' previne a avaliação total da expressão*/
         /*aqui lista gerou apenas quatro repetições da mesma expressão, mas é apenas uma exemplificação*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
a função 'create_list'
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
a função 'create_list' permite criar uma lista a partir de uma regra de substituição.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
create_list(y*2*x,x,list_1to8);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
create_list(k*y^2,k,%); /*a variável '%' armazena a última saída calculada do Maxima*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
create_list(k/y^3,k,%); /*a variável '%' armazena a última saída calculada do Maxima*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
as funções 'lmax' e 'lmin'
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
as funções 'lmax' e 'lmin' retorna os valores máximo e mínimo, respectivamente, de uma lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
exemp_list:[1/2,3,4,5,6,7,8,9,10,11,12];
lmax(exemp_list); /*retorna o valor máximo de uma lista*/
lmin(exemp_list); /*retorna o valor mínimo de uma lista*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Calculando o PI utilizando a série de Madhava–Leibniz
   [wxMaxima: section end   ] */


/* [wxMaxima: subsect start ]
a função ' sum ' para o cálculo de séries
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* a série de Madhava–Leibniz aproxima o valor de PI/4 para a sequência: 1/1-1/3+1/5-1/7+1/9...
* abaixo temos algumas representações da série utilizando a função ' sum '
* são também gerados os gráficos dessas representações utilizando a função ' wxplot2d '
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
4*(1-1/3+1/5-1/7+1/9-1/11+1/13-1/15+1/17-1/19), numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
4*((1/1+1/5+1/9+1/13+1/17)-(1/3+1/7+1/11+1/15+1/19)), numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sum(1/(4*k+1),k,0,4), numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
-sum(1/(4*k+3),k,0,4), numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
4*(%o41+%o42);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* a série tem uma baixa convergência, para 4000 termos a precisão é pequena.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
4*(sum(1/(4*k+1),k,0,4000)-sum(1/(4*k+3),k,0,4000)), numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* o gráfico de convergência da série é mostrado abaixo para 20 termos.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ypi_1:4*(sum(1/(4*x+1),x,0,x)-sum(1/(4*x+3),x,0,x));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([ypi_1,ypi_1,%pi],[x,0,20],[y,2.65,3.3],
    [style, points, lines, lines],
    [color, yellow, blue, black],
    [point_type, bullet],
    [title, "PI Convergence"],
    [xlabel, "summation terms"],
    [ylabel, "PI value approximation"],
    [legend, "points", "false curve", "PI"]
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
utilizando as funções ' rat ', ' simplify_sum ' e ' ratsimp '
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* podemos utilizar a função ' rat ' para encontrar a forma racional comum às duas frações do termo da série.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
rat(ypi_2=4*(1/(4*x+1)-1/(4*x+3)),ypi_2 , x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
8*sum(1/(16*x^2+16*x+3), x, 0, inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* podemos utilizar a função ' simplify_sum ' para encontrar a forma simplificada da série.
* o pacote ' simplify_sum ' tem de ser carregado utilizando ' load '.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
load(simplify_sum)$
simplify_sum(8*sum(1/(16*x^2+16*x+3), x, 0, inf));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* que na forma de ponto flutuante reconhecemos como o π.
    * um simples cancelamento dos termos levaria ao mesmo resultado.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
load(simplify_sum)$
simplify_sum(8*sum(1/(16*x^2+16*x+3), x, 0, inf))$
%, numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* ou ainda podemos utilizar a função ' ratsimp ' para simplificar a equação e também encontrar o π.

   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ratsimp(8*((%pi/2-3*log(2))/8-(-3*log(2)-%pi/2)/8));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* na sua forma original a série precisa de uma grande quantidade de termos para ganhar alguma precisão.
* a função ' ev ' avalia a expressão e exibe o valor.
* a função ' print ' mostra os resultados anexados aos textos de identificação.
* comparamos com o valor de π interno em formato de ponto flutuante:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ypi_4:8*sum((1/(16*x_vl^2-16*x_vl+3)),x_vl,1,21098)$
print("aproximação pela série: ",ev(ypi_4, numer))$
print("   valor interno em 'float': ",(float(%pi)))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
abaixo o gráfico com 100 termos.
* com a série iniciando em 0.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ypi_2:8*sum(1/(16*x^2+16*x+3), x, 0, x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([ypi_2,ypi_2,%pi],[x,0,100],[y,2.65,3.3],
    [style, points, lines, lines],
    [color, yellow, blue, black],
    [point_type, bullet],
    [title, "PI Convergence"],
    [xlabel, "summation terms"],
    [ylabel, "PI value approximation"],
    [legend, "points", "false curve", "PI"]
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ypi_3:8*sum(1/(16*x^2-16*x+3),x,1,x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
* abaixo o gráfico com 500 termos.
* com a série iniciando em 1 e o termo em x^1 negativo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([ypi_3,ypi_3,%pi],[x,1,500],[y,2.65,3.3],
    [style, points, lines, lines],
    [color, yellow, blue, black],
    [point_type, bullet],
    [title, "PI Convergence"],
    [xlabel, "summation terms"],
    [ylabel, "PI value approximation"],
    [legend, "points", "false curve", "PI"]
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
utilizando a função ' limit '
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
* a função ' limit ' calcula o limite, nestes casos do termo de sequências e de séries
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
* exemplos para alguns termos gerais de sequências
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
limit(7.5+1/n,n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(t+1/n,n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit((-1)^n*n,n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit((-1)^n*n,n,4);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit((-1)^n*n,n,5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(cos(n)/(2*n),n,inf);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: answer  start ] */
positive
;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
limit((n-1)/n,n,inf);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: answer  start ] */
positive
;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
limit(7^n/(5^n*n!),n,inf);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: answer  start ] */
positive
;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: comment start ]
* exemplos para alguns termos gerais de séries
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
limit(sum(1/(n*(n+1)),n,1,9),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sum(1/(n*(n+1)),n,1,inf); /*termo geral da série telescópica*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(simplify_sum)$
simplify_sum(sum(1/(n*(n+1)),n,1,inf));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum((-1)^(n+1),n,1,10),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum((-1)^(n+1),n,1,9),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum((-1)^(n+1),n,1,minf),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum(n,n,1,minf),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum(n,n,1,inf),n,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit('sum(3*4^(n-1),n,1,12),n,inf); /*o operador ' não permite a avaliação do somatório*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(simplify_sum)$
simplify_sum(sum(a*r^(n-1),n,1,n)); /*termo geral da série geométrica*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
limit(sum(3*4^(n-1),n,1,12),n,inf);
/* [wxMaxima: input   end   ] */



/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
